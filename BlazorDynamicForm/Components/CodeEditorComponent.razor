@using BlazorDynamicForm.Attributes
@using BlazorMonaco.Editor
@using Microsoft.AspNetCore.Components.Forms
@using BlazorMonaco
@using BlazorMonaco.Editor
@using BlazorMonaco.Languages
@inherits BlazorDynamicForm.Core.FormComponentBase


<div class="row">
    <label for="@PropertyType" class="col-sm-2 col-form-label">@PropertyName</label>
    <div class="col-sm-10">
        <div class="input-group mb-3">
            <span class="input-group-text" id="basic-addon1">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-file-code" viewBox="0 0 16 16">
                    <path d="M6.646 5.646a.5.5 0 1 1 .708.708L5.707 8l1.647 1.646a.5.5 0 0 1-.708.708l-2-2a.5.5 0 0 1 0-.708zm2.708 0a.5.5 0 1 0-.708.708L10.293 8 8.646 9.646a.5.5 0 0 0 .708.708l2-2a.5.5 0 0 0 0-.708z" />
                    <path d="M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2zm10-1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1" />
                </svg>
            </span>
            <StandaloneCodeEditor @ref="_codeEditor" OnDidChangeModelContent="Callback" Id="@PropertyType" ConstructionOptions="EditorConstructionOptions" CssClass="form-code-editor form-control" />
        </div>
    </div>
</div>
<style>
    .form-code-editor {
        height: 400px;
    }
</style>
@code {
    private StandaloneCodeEditor _codeEditor;
    private string TypedValue => Convert.ToString(Value);


    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrWhiteSpace(TypedValue))
        {
            await _codeEditor.SetValue(TypedValue);
        }
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        var config = Form.FormDefinition.Properties[PropertyType].Attributes.OfType<CodeEditorAttribute>().FirstOrDefault();
        return new StandaloneEditorConstructionOptions
            {
                Theme = config.Theme,
                AutomaticLayout = true,
                Language = config.Language,
                Value = config.Example
            };
    }

    private async Task Callback(ModelContentChangedEvent obj)
    {
        Value = await _codeEditor.GetValue();
    }

}