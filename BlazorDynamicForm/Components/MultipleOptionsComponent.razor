@using Microsoft.AspNetCore.Components.Forms
@using BlazorDynamicForm.Attributes
@using BlazorDynamicForm.AttributesComponents
@inherits BlazorDynamicForm.Core.FormComponentBase

<LabelComponent LabelInfo="_label" PropertyName="@PropertyName">
		<div class="input-group">
			<span class="input-group-text" id="basic-addon1">
				<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-option" viewBox="0 0 16 16">
					<path d="M1 2.5a.5.5 0 0 1 .5-.5h3.797a.5.5 0 0 1 .439.26L11 13h3.5a.5.5 0 0 1 0 1h-3.797a.5.5 0 0 1-.439-.26L5 3H1.5a.5.5 0 0 1-.5-.5m10 0a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1-.5-.5" />
				</svg>
			</span>
            <InputSelect @bind-Value="TypedValue" class="form-select form-control" >
                @if (_config != null)
                {
                    @foreach (var option in _config.Options)
                    {
                        <option value="@option">@option</option>
                    }
                }
            </InputSelect>
		</div>
</LabelComponent>
@code {
	private string TypedValue
	{
		get => Value?.ToString() ?? string.Empty;
		set => Value = value;
	}
	private MultipleSelectAttribute? _config;

	private LabelAttribute _label;


	protected override async Task OnParametersSetAsync()
	{
		_config = SchemeProperty.Attributes?.OfType<MultipleSelectAttribute>().FirstOrDefault();
		if (string.IsNullOrEmpty(TypedValue))
		{
			TypedValue = _config.Options.First();
		}
		_label = SchemeProperty.Attributes?.OfType<LabelAttribute>().FirstOrDefault() ?? LabelAttribute.Instance;
	}
}