@using Microsoft.AspNetCore.Components.Forms
@using BlazorDynamicForm.Attributes
@inherits BlazorDynamicForm.Core.FormComponentBase

<div class="row">
    <label class="col-sm-2 col-form-label">@PropertyName</label>
    <div class="col-sm-10">
        <div class="input-group mb-3">
            <span class="input-group-text" id="basic-addon1">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-option" viewBox="0 0 16 16">
                    <path d="M1 2.5a.5.5 0 0 1 .5-.5h3.797a.5.5 0 0 1 .439.26L11 13h3.5a.5.5 0 0 1 0 1h-3.797a.5.5 0 0 1-.439-.26L5 3H1.5a.5.5 0 0 1-.5-.5m10 0a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1-.5-.5" />
                </svg>
            </span>
            <InputSelect @bind-Value="TypedValue" class="form-select form-control">
                @foreach (var option in _configEnum)
                {
                    <option value="@option">@option</option>
                }
            </InputSelect>
        </div>
    </div>
</div>
@code {
    private string TypedValue
    {
        get
        {
            // Try to retrieve an integer index from Value.
            int index = Value is int intValue ? intValue : Convert.ToInt32(Value);
            if (index < 0 || index >= _configEnum.Count)
            {
                index = 0;
            }
            return _configEnum[index];
        }
        set
        {
            int index = _configEnum.IndexOf(value);
            if (index == -1)
            {
                index = 0;
            }
            Value = index;
        }
    }
    private List<string> _configEnum;



    protected override async Task OnParametersSetAsync()
    {
        // Ensure we have enum values.
        if (SchemeProperty.Enum is null || !SchemeProperty.Enum.Any())
        {
            throw new InvalidOperationException("Missing enum values in the scheme property.");
        }
        _configEnum = SchemeProperty.Enum;

        // If Value is null, default to the first element.
        if (Value is null)
        {
            Value = 0;
        }
        else
        {
            // Validate that the current Value (as int) is within the valid range.
            int index = Value is int intValue ? intValue : Convert.ToInt32(Value);
            if (index < 0 || index >= _configEnum.Count)
            {
                // Optionally, reset to default or throw an error.
                Value = 0;
            }
        }
    }
}