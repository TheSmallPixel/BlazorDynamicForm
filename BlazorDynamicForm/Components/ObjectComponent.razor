@using BlazorDynamicForm.Attributes
@using BlazorDynamicForm.Core
@using Microsoft.AspNetCore.Components.Forms
@using TypeAnnotationParser
@using BlazorDynamicForm.AttributesComponents
@inject DynamicFormConfiguration Configuration
@inherits BlazorDynamicForm.Core.FormComponentBase


<BoxComponent BoxAttribute="_boxAttribute" PropertyName="@PropertyName">
	<div class="row g-2">
		@{

			if (Value is not IDictionary<string, object> dict)
			{
				<div class="alert alert-danger">
					<strong>Value</strong> is not a dictionary.
					Cannot render properties.
				</div>
			}
			else
			{
				SchemeProperty objectScheme = SchemeProperty;
				if (!string.IsNullOrEmpty(SchemeProperty.Ref))
				{
					if (!SchemeModel.References.TryGetValue(SchemeProperty.Ref, out objectScheme))
					{
						<div class="alert alert-danger">
							<strong>Ref</strong> not found.
							Cannot render properties.
						</div>
					}
				}

				if (objectScheme?.Properties != null)
				{

					foreach (var (propertyName, lookupSchemaProperty) in objectScheme.Properties)
					{
						var propertySchema = Configuration.ResolveReference(SchemeModel, lookupSchemaProperty);
						var componentType = Configuration.GetElement(SchemeModel, propertySchema);
						// If no component type found, skip or show a message
						if (componentType is null)
						{
							<div class="text-muted">
								No renderer for property '@propertyName' of type '@propertySchema.Type'
							</div>
							continue;
						}

						var callback = EventCallback.Factory.Create<object?>
						(this, (object? newVal) =>
						{
							// Your update logic here
							dict[propertyName] = newVal;
						});
						var parameters = new Dictionary<string, object?>
							{
								["SchemeProperty"] = propertySchema,
								["SchemeModel"] = SchemeModel,
								["PropertyName"] = propertyName,
								["IsFirst"] = false,
								["Value"] = dict[propertyName],
								["ValueChanged"] = callback
							};
						var grid = propertySchema.Attributes?.OfType<GridAttribute>().FirstOrDefault() ?? new GridAttribute(12);

						var size = "col-md-" + grid.Size;
						<div class="@size">
							<DynamicComponent Type="@componentType" Parameters="@parameters" />
						</div>


					}

				}
				else
				{
					<div class="alert alert-danger">
						<strong>Properties</strong> not found.
					</div>
				}
			}
		}
	</div>
</BoxComponent>
@code {
	private bool _status = false;

	private BoxAttribute _boxAttribute;

	protected override async Task OnParametersSetAsync()
	{
		_boxAttribute = SchemeProperty.Attributes?.OfType<BoxAttribute>().FirstOrDefault() ?? BoxAttribute.Instance;
	}

}
