@using System.Dynamic
@using BlazorDynamicForm.Core
@using TypeAnnotationParser
@inject DynamicFormConfiguration Configuration


<!-- A simple form element with an @onsubmit -->
<form onsubmit="@HandleSubmitAsync" novalidate>
    @if (Scheme?.Properties != null)
    {
        var componentType = Configuration.GetElement(Scheme, Scheme);
        if (componentType is not null)
        {
            DataObject = (IDictionary<string, object>)Scheme.CreateOrValidateData(Scheme, DataObject);
            var parameters = new Dictionary<string, object?>
            {
                ["SchemeProperty"] = Scheme,
                ["SchemeModel"] = Scheme,
                ["PropertyName"] = Scheme.Name,
                ["IsFirst"] = true,
                ["Value"] = DataObject,
                ["ValueChanged"] = EventCallback.Factory.Create<object?>(this, OnChildValueChanged)
            };
            <ErrorBoundary>
                <ChildContent>
                    <DynamicComponent Type="@componentType" Parameters="@parameters" />
                </ChildContent>
                <ErrorContent Context="ex">
                    <div class="alert alert-danger">
                        An error occurred: @ex.Message
                    </div>
                </ErrorContent>
            </ErrorBoundary>
        }
        else
        {
            <p class="text-danger">No component found for this scheme.</p>
        }
    }
    @SubmitTemplate
</form>

@code {
	// Holds your data, which can be shaped by ExpandoObject
	private IDictionary<string, object> DataObject { get; set; } = new Dictionary<string, object>();

	[Parameter]
	public EventCallback<IDictionary<string, object>?> OnValidSubmit { get; set; }

	[Parameter]
	public RenderFragment SubmitTemplate { get; set; }

	[Parameter]
	public required SchemeModel Scheme { get; set; }

	protected override void OnInitialized()
	{
		// If needed, initialize "DataObject" or "Scheme" from services, etc.
		// This is just a placeholder for demonstration.
		base.OnInitialized();
	}


	private async Task HandleSubmitAsync()
    {
		await OnValidSubmit.InvokeAsync(DataObject);
	}

	private void OnChildValueChanged(object? newValue)
	{
		if (newValue is IDictionary<string, object> updatedObj)
		{
			DataObject = updatedObj;
		}
		// Force a re-render if needed:
		StateHasChanged();
	}
}
