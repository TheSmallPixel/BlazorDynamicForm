@using BlazorDynamicForm.Core
@using Microsoft.AspNetCore.Components.Forms
@inject DynamicFormConfiguration Configuration
@inherits BlazorDynamicForm.Core.FormComponentBase
<div class="rounded border p-0 shadow-sm">
	<div class="row">
		<div class="col input-group">
			<span class="input-group-text">
				<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-list-ol" viewBox="0 0 16 16">
					<path fill-rule="evenodd" d="M5 11.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5" />
					<path d="M1.713 11.865v-.474H2c.217 0 .363-.137.363-.317 0-.185-.158-.31-.361-.31-.223 0-.367.152-.373.31h-.59c.016-.467.373-.787.986-.787.588-.002.954.291.957.703a.595.595 0 0 1-.492.594v.033a.615.615 0 0 1 .569.631c.003.533-.502.8-1.051.8-.656 0-1-.37-1.008-.794h.582c.008.178.186.306.422.309.254 0 .424-.145.422-.35-.002-.195-.155-.348-.414-.348h-.3zm-.004-4.699h-.604v-.035c0-.408.295-.844.958-.844.583 0 .96.326.96.756 0 .389-.257.617-.476.848l-.537.572v.03h1.054V9H1.143v-.395l.957-.99c.138-.142.293-.304.293-.508 0-.18-.147-.32-.342-.32a.33.33 0 0 0-.342.338zM2.564 5h-.635V2.924h-.031l-.598.42v-.567l.629-.443h.635z" />
				</svg>
			</span>
			<span class="input-group-text flex-grow-1">@PropertyName</span>
			<Button class="btn btn-outline-secondary" type="button">Open</Button>
			<Button @onclick="AddItem" class="btn btn-outline-secondary" type="button">
				<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus" viewBox="0 0 16 16">
					<path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4" />
				</svg>
			</Button>
		</div>
	</div>
	<div style="padding-bottom: 6px; padding-top: 6px;">
		@{

			var indexScheme = SchemeProperty.Indices.SingleOrDefault();
			if (indexScheme is null)
			{
				<div class="alert alert-warning">
					No itemProperty found in <strong>SchemeProperty.Indices</strong>.
				</div>
			}
			else
			{
				var componentType = Configuration.GetElement(SchemeModel, indexScheme);
				if (componentType is null)
				{
					<div class="text-muted">
						No renderer for property '@indexScheme' of type '@indexScheme.Type'
					</div>
				}
				else
				{
					for (int i = 0; i < TypedValue.Count; i++)
					{
						var guid = Guid.NewGuid();
						var callback = EventCallback.Factory.Create<object?>(this, (object? newVal) =>
						{
							var index = TypedValue.IndexOf(ListReference[guid]);
							// Your update logic here
							ListReference[guid] = newVal;
							TypedValue[index] = newVal;

						});
						ListReference[guid] = TypedValue[i];
						var parameters = new Dictionary<string, object?>
						{
							["SchemeProperty"] = indexScheme,
							["SchemeModel"] = SchemeModel,
							["PropertyName"] = $"Item {i}",
							["IsFirst"] = false,
							["Value"] = ListReference[guid],
							["ValueChanged"] = callback
						};

						<div @key="guid" class="row">
							<div class="col-auto d-flex justify-content-center align-items-center ms-3">
								<i>
									<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-list" viewBox="0 0 16 16">
										<path fill-rule="evenodd" d="M2.5 12a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5" />
									</svg>
								</i>
							</div>
							<div class="col">
								<DynamicComponent Type="@componentType" Parameters="@parameters" />
							</div>
							<div class="col-auto ps-0">
								<button @onclick="() => { RemoveItem(guid); }" type="button" class="btn btn-danger">
									<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
										<path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z" />
										<path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z" />
									</svg>
								</button>
							</div>
						</div>
						@if (i + 1 < TypedValue.Count)
						{
							<hr style="border: 0; height: 0.1px; margin-left: 15px; margin-right: 15px;margin-top: 6px;margin-bottom: 6px;">
						}
					}
				}
			}
		}
	</div>
</div>

@code {
	private Dictionary<Guid, object> ListReference = new Dictionary<Guid, object>();
	private IList<object> TypedValue
	{
		get => Value as IList<object> ?? new List<object>();
		set => Value = value;
	}

	private void RemoveItem(Guid i)
	{
		var index = TypedValue.IndexOf(ListReference[i]);
		TypedValue.RemoveAt(index);

	}
	private void AddItem()
	{
		var itemProperty = SchemeProperty?.Indices?.SingleOrDefault();
		if (itemProperty is null)
		{
			// Show a warning or do nothing if no item property
			return;
		}
		var item = SchemeModel.CreateOrValidateData(itemProperty, null);
		if (item is not null)
		{
			TypedValue.Add(item);
		}
	}
}