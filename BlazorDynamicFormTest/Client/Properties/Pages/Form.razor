@page "/"
@using BlazorDynamicForm.Attributes
@using BlazorDynamicForm.Components
@using Newtonsoft.Json
@using TypeAnnotationParser

<DynamicForm Scheme="@_scheme" OnValidSubmit="@OnValidResult">
    <SubmitTemplate>
        <div class="col-12">
            <button type="submit" class="btn btn-primary">Save</button>
        </div>
    </SubmitTemplate>
</DynamicForm>

@if (!string.IsNullOrEmpty(SerializedJson))
{
    <pre>@SerializedJson</pre>
}

@code {

    void OnValidResult(IDictionary<string, object>? data)
    {
        if (data is not null)
        {
            // Serialize using Newtonsoft.Json
            SerializedJson = JsonConvert.SerializeObject(data, Formatting.Indented);
            Console.WriteLine(SerializedJson);
        }
        else
        {
            SerializedJson = "Form returned null data.";
        }
    }

    private SchemeModel _scheme;
    // ExpandoObject? data;
    public string? SerializedJson = null;
    public class Cube
    {
        [SelectBox(["1", "2"])]
        public int Value { get; set; }
    }

    public enum Colors
    {
        Black,
        Red,
        Yellow
    };
    public class Test
    {
        [MultipleSelect("Italian", "Mandarino", "Ananas")]
        public string TTS { get; set; }

        [CodeEditor("chsarp")]
        public string Name { get; set; }

        [TextArea()]
        public string Message { get; set; }

        [Placeholder("This should be a prova")]
        public string Message2 { get; set; }

        public float Limit { get; set; }

        [Range(0,100)]
        public int LimitInt { get; set; }


        public decimal DecimalLimit { get; set; }

        public Colors Colors { get; set; }

    }
    protected override void OnParametersSet()
    {
        if (_scheme == null)
        {
            var config = new ParserConfiguration();
            config.Attributes = new List<Annotation>() { };
            var parser = new TypeAnnotationParser(config);

            _scheme = parser.Parse<Test>();
        }

        base.OnParametersSet();
    }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

  
}
