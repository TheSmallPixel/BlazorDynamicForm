@page "/"
@using BlazorDynamicForm.Attributes
@using BlazorDynamicForm.Components
@using Newtonsoft.Json
@using TypeAnnotationParser
@using TypeAnnotationParser.Serialization

<DynamicForm Scheme="@_scheme" OnValidSubmit="@OnValidResult" Data="data" >
    <SubmitTemplate>
        <div class="col-12">
            <button type="submit" class="btn btn-primary">Save</button>
        </div>
    </SubmitTemplate>
</DynamicForm>

@if (!string.IsNullOrEmpty(SerializedJson))
{
    <pre>@SerializedJson</pre>
}

@code {

    Dictionary<string, object> data = new Dictionary<string, object>() { { "TTS", "Italian" }, { "Limit", 2f } };

    void OnValidResult(IDictionary<string, object>? data)
    {
        if (data is not null)
        {
            // Serialize using Newtonsoft.Json
            SerializedJson = JsonConvert.SerializeObject(data, Formatting.Indented);
            Console.WriteLine(SerializedJson);
        }
        else
        {
            SerializedJson = "Form returned null data.";
        }
    }

    private SchemeModel _scheme;
    // ExpandoObject? data;
    public string? SerializedJson = null;
    public class Cube
    {
        [SelectBox(["1", "2"])]
        public int Value { get; set; }
    }

    public enum Colors
    {
        Black,
        Red,
        Yellow
    };
    public class Test
    {
        [MultipleSelect("Italian", "Mandarino", "Ananas")]
        public string TTS { get; set; }

        [CodeEditor("chsarp")]
        public string Name { get; set; }

        [TextArea()]
        public string Message { get; set; }

        [Placeholder("This should be a prova")]
        public string Message2 { get; set; }

        public float Limit { get; set; }

        [Range(0,100)]
        public int LimitInt { get; set; }


        public decimal DecimalLimit { get; set; }

        public Colors Colors { get; set; }

    }

    public class SwitchTask 
    {

	    [Name("Variable"), Label("Variabile")]
	    public string Variable { get; set; }


        [Name("Outputs"), Grid(6)]
	    public List<SwitchOutput> Outputs { get; set; }

	    [Name("Outputs"), Grid(6)]
	    public List<SwitchOutput> OutputsDuo { get; set; }

	    [Name("Outputs"), Grid(8)]
	    public List<SwitchOutput> Outputsthree { get; set; }

	    [Name("Outputs"), Grid(4)]
	    public List<SwitchOutput> OutputsFour { get; set; }
    }
    public class SwitchOutput
    {
        [Name("Output"), Label("Output", LabelAttribute.LabelPosition.Inline)]
	    public string OutputName { get; set; }

        [Box(BoxAttribute.BoxVisibility.None)]
	    public List<SwitchOption> Options { get; set; }

	    [Name("Is default")]
	    public bool IsDefault { get; set; }
    }
    public class SwitchOption
    {
	    [Name("Comparator Type"), MultipleSelect(new[] { "Equals", "Regex", "Contains", ">", "<" }), Grid(4)]
	    public string ComparatorType { get; set; }
	    [Name("Value"),Grid(8)]
	    public string Value { get; set; }
    }
    protected override void OnParametersSet()
    {
        if (_scheme == null)
        {
            var config = new ParserConfiguration();
            config.Attributes = new List<Annotation>() { };
            var parser = new TypeAnnotationParser(config);
            var schme = Scheme.GetSchemeFromYaml(BlazorDynamicForm.Utility.DefaultComponents, customConfig);
            _scheme = parser.Parse<SwitchTask>();
        }

        base.OnParametersSet();
    }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    string customConfig = "references:\r\n  '#SwitchOption':\r\n    name: SwitchOption\r\n    type: Object\r\n    properties:\r\n      ComparatorType:\r\n        type: String\r\n        attributes:\r\n        - !Name\r\n          name: Comparator Type\r\n        - !MultipleSelect\r\n          options:\r\n          - Equals\r\n          - Regex\r\n          - Contains\r\n          - '>'\r\n          - <\r\n      Value:\r\n        type: String\r\n        attributes:\r\n        - !Name\r\n          name: Value\r\n  '#Boolean':\r\n    name: Boolean\r\n    type: Object\r\n    attributes:\r\n    - !Name\r\n      name: Is default\r\n  '#SwitchOutput':\r\n    name: SwitchOutput\r\n    type: Object\r\n    properties:\r\n      OutputName:\r\n        type: String\r\n        attributes:\r\n        - !Name\r\n          name: Output\r\n      Options:\r\n        type: Array\r\n        indices:\r\n        - ref: '#SwitchOption'\r\n      IsDefault:\r\n        ref: '#Boolean'\r\nname: SwitchTask\r\ntype: Object\r\nproperties:\r\n  Variable:\r\n    type: String\r\n    attributes:\r\n    - !Name\r\n      name: Variable\r\n  Outputs:\r\n    type: Array\r\n    attributes:\r\n    - !Name\r\n      name: Outputs\r\n    indices:\r\n    - ref: '#SwitchOutput'\r\n";
}
