@page "/form"
@using System.ComponentModel.DataAnnotations
@using System.Dynamic
@using System.ComponentModel
@using BlazorDynamicFormDataAnnotation
@using BlazorDynamicFormGenerator

<DynamicForm DataDefinition="@definition" DataObject="@data" OnValidSubmit="@PrintResult">
    <ValidationMessageTemplate Context="error">
        @error
    </ValidationMessageTemplate>
    <FieldTemplate Context="template">
        <div class="row mb-3">
            <label for="@template.PropertyInfo.Name" class="col-sm-2 col-form-label">@template.PropertyInfo.DisplayName</label>
            <div class="has-validation col-sm-10">
                <div class="col">
                    @template.DynamicComponent
                </div>
                @if (!template.IsValid)
                {
                    <div class="invalid-feedback d-block">
                        @template.ValidationComponent
                    </div>
                }
            </div>
        </div>
    </FieldTemplate>
    <SubmitTemplate>
        <div class="col-12">
            <button type="submit" class="btn btn-primary">Save</button>
        </div>
    </SubmitTemplate>
</DynamicForm>

<p>@Result</p>
@code {

    public class Test
    {
        [Required]
        [Display(Name = "First Name")]
        [DataType(DataType.Text)]
        public string FirstName { get; set; }
        [Display(Name = "Last Name")]
        [DataType(DataType.Text)]
        public string LastName { get; set; }

        [Required]
        [Display(Name = "Email Address")]
        [DataType(DataType.EmailAddress)]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [Display(Name = "PhoneNumber")]
        [DataType(DataType.PhoneNumber)]
        [Phone]
        public string PhoneNumber { get; set; }
        [Required]
        [Display(Name = "Date of Birth")]
        [DataType(DataType.DateTime)]
        public DateTime? DOB { get; set; }

        [Required]
        [DataType(DataType.Duration)]
        [Display(Name = "Total Experience")]
        [Range(0, 20, ErrorMessage = "The Experience range should be 0 to 20")]
        [DefaultValue(10.0)]
        public decimal TotalExperience { get; set; } = 22;

        [Required]
        [Display(Name = "Select a Country")]
        [DataType("DropdownList")]
        [LinkedAttribute(typeof(int))]
        public string Country { get; set; }

        [Required]
        [DataType(DataType.MultilineText)]
        [Display(Name = "Address")]
        [DefaultValue("piazza 24 maggio")]
        [BlazorDynamicFormGenerator.ReadOnly]
        public string Address { get; set; }
    }

    void PrintResult(string data)
    {
        Result = data;

    }
    private string Result { get; set; }
    Test employeeDetails;
    ModuleNodeDefinition definition;
    ExpandoObject data;
    protected override void OnInitialized()
    {
      //  data = new ExpandoObject();
       // employeeDetails = new Test();
        definition = ModuleNodePropertyDefinitionExtensions.GetDefinition<Test>();
      //  data = ToExpandoObject(employeeDetails);
    }

    public ExpandoObject ToExpandoObject(object obj)
    {
        // Null-check

        IDictionary<string, object> expando = new ExpandoObject();

        foreach (PropertyDescriptor property in TypeDescriptor.GetProperties(obj.GetType()))
        {
            expando.Add(property.Name, property.GetValue(obj));
        }

        return (ExpandoObject)expando;
    }

}
