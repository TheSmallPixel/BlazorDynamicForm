@page "/"
@using System.Dynamic
@using BlazorDynamicForm.Attributes.Display
@using BlazorDynamicForm.Entities
@using BlazorDynamicForm.Utility
@using Newtonsoft.Json
@inject HttpClient Http

@if (definition != null)
{
    <DynamicForm FormDefinition="@definition" DataObject="@data" OnValidSubmit="@OnValidResult">
        <ValidationMessageTemplate Context="error">
            @error
        </ValidationMessageTemplate>
        <FieldTemplate Context="template">
            @if (template.PropertyInfo.PropertyType == FormPropertyType.Primitive)
            {
                <div class="row mb-3">
                    <label for="@template.PropertyInfo.TypeName" class="col-sm-2 col-form-label">@GetName(template.PropertyInfo)</label>
                    <div class="has-validation col-sm-10">
                        @if (!template.IsValid)
                        {
                            <div class="invalid-feedback d-block">
                                @template.ValidationComponent
                            </div>
                        }
                        <div class="col">
                            @template.DynamicComponent
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="row">
                    <label for="@template.PropertyInfo.TypeName" class="col-sm-2 col-form-label">@GetName(template.PropertyInfo)</label>
                </div>
                <div class="row">
                    <div class="has-validation col">
                        @if (!template.IsValid)
                        {
                            <div class="invalid-feedback d-block">
                                @template.ValidationComponent
                            </div>
                        }
                        <div class="col">
                            @template.DynamicComponent
                        </div>
                    </div>
                </div>
            }
        </FieldTemplate>
        <SubmitTemplate>
            <div class="col-12">
                <button type="submit" class="btn btn-primary">Save</button>
            </div>
        </SubmitTemplate>
    </DynamicForm>
}

<p>@Result</p>
@code {

    private string GetName(FormProperty property)
    {
        var displayName = property.DisplayRules.OfType<DisplayNameForm>().FirstOrDefault();
        if (displayName == null)
        {
            return StringUtils.AddSpacesToCamelCase(property.PropertyName ?? property.TypeName);
        }
        return displayName.Name;
    }

    void OnValidResult(ExpandoObject? data)
    {
        JsonData = JsonConvert.SerializeObject(data, new JsonSerializerSettings()
            {
                DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate,
                TypeNameHandling = TypeNameHandling.Auto
            });
        Console.WriteLine(data);
    }
    private string Result { get; set; }

    FormMap? definition;
    ExpandoObject? data;
    public static string? JsonData = null;


    protected override async Task OnInitializedAsync()
    {

        var definitionRaw = await Http.GetStringAsync("Definition");
        if (!string.IsNullOrWhiteSpace(JsonData))
        {
            data = JsonConvert.DeserializeObject<ExpandoObject?>(JsonData, new JsonSerializerSettings()
            {
                DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate,
                TypeNameHandling = TypeNameHandling.Auto
            });
        }
        Console.WriteLine(definitionRaw);
        definition = JsonConvert.DeserializeObject<FormMap>(definitionRaw, new JsonSerializerSettings()
            {
                DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate,
                TypeNameHandling = TypeNameHandling.Auto
            });

    }

}
