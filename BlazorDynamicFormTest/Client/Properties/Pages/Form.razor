@page "/"
@using System.Dynamic
@using BlazorDynamicForm.Attributes
@using BlazorDynamicForm.Components
@using Newtonsoft.Json
@using Newtonsoft.Json.Converters
@using TypeAnnotationParser
@using TypeAnnotationParser.Serialization

@if (_scheme is not null)
{
	<DynamicForm Scheme="@_scheme" OnValidSubmit="@OnValidResult" Data="_formData">
		<SubmitTemplate>
			<div class="col-12">
				<button type="submit" class="btn btn-primary">Save</button>
			</div>
		</SubmitTemplate>
	</DynamicForm>
}

@if (!string.IsNullOrEmpty(SerializedJson))
{
	<pre>@SerializedJson</pre>
}

@code {

	void OnValidResult(IDictionary<string, object>? data)
	{
		if (data is not null)
		{
			// Serialize using Newtonsoft.Json
			SerializedJson = JsonConvert.SerializeObject(data, Formatting.Indented);
			Console.WriteLine(SerializedJson);
		}
		else
		{
			SerializedJson = "Form returned null data.";
		}
	}

	private SchemeModel? _scheme;
	// ExpandoObject? data;
	public string? SerializedJson = null;
	public class Cube
	{
		[SelectBox(["1", "2"])]
		public int Value { get; set; }
	}

	public enum Colors
	{
		Black,
		Red,
		Yellow
	};
	public class Test
	{
		[MultipleSelect("Italian", "Mandarino", "Ananas")]
		public string TTS { get; set; }

		[CodeEditor("chsarp")]
		public string Name { get; set; }

		[TextArea()]
		public string Message { get; set; }

		[Placeholder("This should be a prova")]
		public string Message2 { get; set; }

		public float Limit { get; set; }

		[Range(0, 100)]
		public int LimitInt { get; set; }


		public decimal DecimalLimit { get; set; }

		public Colors Colors { get; set; }

	}

	public class SwitchTask
	{

		[Name("Variable"), Label("Variabile")]
		public string Variable { get; set; }


		[Name("Outputs"), Grid(6)]
		public List<SwitchOutput> Outputs { get; set; }

		[Name("Outputs"), Grid(6)]
		public List<SwitchOutput> OutputsDuo { get; set; }

		[Name("Outputs"), Grid(8)]
		public List<SwitchOutput> Outputsthree { get; set; }

		[Name("Outputs"), Grid(4)]
		public List<SwitchOutput> OutputsFour { get; set; }

		[Box(BoxAttribute.BoxVisibility.Visible)]
		public SwitchOutput Optiooons { get; set; }

		[Box(BoxAttribute.BoxVisibility.Visible)]
		public SwitchOutput OptiooonsDuo { get; set; }
	}
	public class SwitchOutput
	{
		[Name("Output"), Label("Output", LabelAttribute.LabelPosition.Inline)]
		public string OutputNameA { get; set; }

		[Box(BoxAttribute.BoxVisibility.None)]
		public List<SwitchOption> Options { get; set; }

		[Name("Is default")]
		public bool IsDefault
		{
			get;
			set;
		}
	}
	public class SwitchOption
	{
		[Name("Comparator Type"), MultipleSelect(new[] { "Equals", "Regex", "Contains", ">", "<" }), Grid(4)]
		public string ComparatorType { get; set; }
		[Name("Value"), Grid(8)]
		public string Value { get; set; }
	}
	private IDictionary<string, object> _formData;
	protected override void OnParametersSet()
	{
		if (_scheme == null)
		{
			var config = new ParserConfiguration();
			config.Attributes = new List<Annotation>() { };
			var parser = new TypeAnnotationParser(config);
			var schme = Scheme.GetSchemeFromYaml(BlazorDynamicForm.Utility.DefaultComponents, customConfig);


			//_formData = new();

			dynamic d = JsonConvert.DeserializeObject<ExpandoObject>(jsonData, new ExpandoObjectConverter());
			_formData = (IDictionary<string, object>)d;
			if (_formData is null)
			{
				_formData = new Dictionary<string, object>();
			}
			_scheme = parser.Parse<SwitchTask>();
			var schemeYaml = Scheme.GetYamlFromScheme<SwitchTask>(BlazorDynamicForm.Utility.DefaultComponents);
			Console.WriteLine(schemeYaml);
		}




		base.OnParametersSet();
	}
	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
	}

	string jsonData = @"{
  ""Variable"": ""Ciao"",
  ""Outputs"": [
    {
      ""OutputName"": """",
      ""Options"": [
        {
          ""ComparatorType"": ""Equals"",
          ""Value"": ""1""
        },
        {
          ""ComparatorType"": ""Equals"",
          ""Value"": ""2""
        },
        {
          ""ComparatorType"": ""Equals"",
          ""Value"": ""3""
        }
      ],
      ""IsDefault"": true
    }
  ],
  ""OutputsDuo"": [
    {
      ""OutputName"": """",
      ""Options"": [
        {
          ""ComparatorType"": ""Equals"",
          ""Value"": ""nono""
        }
      ],
      ""IsDefault"": false
    }
  ],
  ""Outputsthree"": [],
  ""OutputsFour"": [
    {
      ""OutputName"": ""di"",
      ""Options"": [],
      ""IsDefault"": false
    },
    {
      ""OutputName"": ""no"",
      ""Options"": [],
      ""IsDefault"": true
    }
  ]
}";
	string customConfig = "references:\r\n  '#SwitchOption':\r\n    name: SwitchOption\r\n    type: Object\r\n    properties:\r\n      ComparatorType:\r\n        type: String\r\n        attributes:\r\n        - !Name\r\n          name: Comparator Type\r\n        - !MultipleSelect\r\n          options:\r\n          - Equals\r\n          - Regex\r\n          - Contains\r\n          - '>'\r\n          - <\r\n      Value:\r\n        type: String\r\n        attributes:\r\n        - !Name\r\n          name: Value\r\n  '#Boolean':\r\n    name: Boolean\r\n    type: Object\r\n    attributes:\r\n    - !Name\r\n      name: Is default\r\n  '#SwitchOutput':\r\n    name: SwitchOutput\r\n    type: Object\r\n    properties:\r\n      OutputName:\r\n        type: String\r\n        attributes:\r\n        - !Name\r\n          name: Output\r\n      Options:\r\n        type: Array\r\n        indices:\r\n        - ref: '#SwitchOption'\r\n      IsDefault:\r\n        ref: '#Boolean'\r\nname: SwitchTask\r\ntype: Object\r\nproperties:\r\n  Variable:\r\n    type: String\r\n    attributes:\r\n    - !Name\r\n      name: Variable\r\n  Outputs:\r\n    type: Array\r\n    attributes:\r\n    - !Name\r\n      name: Outputs\r\n    indices:\r\n    - ref: '#SwitchOutput'\r\n";
}
