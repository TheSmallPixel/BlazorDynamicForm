@using System.Dynamic
@using BlazorDynamicForm.Attributes.Display
@using BlazorDynamicForm.Entities
@using Syncfusion.Blazor.Grids

@if (!string.IsNullOrWhiteSpace(IndexKey))
{
    <SfGrid @ref="@GridInstance" TValue="ExpandoObject" AllowPaging="true" PageSettings="@settingsGrid" DataSource=@Value Toolbar="@ToolbarItems" AllowSelection="true" AllowRowDragAndDrop="true">
        <GridEditSettings AllowAdding="true" AllowDeleting="true"></GridEditSettings>
        <GridSelectionSettings Type="SelectionType.Multiple"></GridSelectionSettings>
        <GridEvents OnActionBegin="BeginHandler" TValue="ExpandoObject"></GridEvents>
        <GridColumns>
            <GridColumn Field="@IndexKey" Visible="true" HeaderText="#Key" IsPrimaryKey="true" Width="auto" AllowAdding="true" AllowEditing="true"></GridColumn>
            <GridColumn HeaderText="@Formmap.Properties[Formkey].TypeFullName" Width="40" AllowAdding="false" AllowEditing="false">
                <Template>
                    Item
                    @*@{
                //@Formmap.Properties[Formkey].TypeName
                }*@
                </Template>
            </GridColumn>
            <GridColumn HeaderText="Manage Records" Width="150" AllowAdding="false" AllowEditing="false">
                <GridCommandColumns>
                    <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-delete", CssClass = "e-flat" })"></GridCommandColumn>
                </GridCommandColumns>
            </GridColumn>
        </GridColumns>
        <GridTemplates>
            <DetailTemplate>
                @if (Formmap != null && Formmap.Properties[Formkey] != null && Formmap.Properties[Formkey].Structure.Any())
                {
                    var typeKey = Formmap.Properties[Formkey].Structure.FirstOrDefault().Value;
                    if (typeKey != null)
                    {
                        foreach (var nice in ChildBuilder.Invoke(typeKey, context))
                        {
                            @nice
                        }
                    }
                }
            </DetailTemplate>
        </GridTemplates>
    </SfGrid>
}
@code {


    [Parameter]
    public Func<string, object, List<RenderFragment>> ChildBuilder { get; set; }
    [Parameter]
    public List<ExpandoObject> Value { get; set; }
    [Parameter]
    public FormMap Formmap { get; set; }
    [Parameter]
    public string Formkey { get; set; }

    [Parameter]
    public object? ValueChanged { get; set; }
    private List<string> ToolbarItems = new List<string>() { "Add", "Delete" };
    private GridPageSettings settingsGrid = new GridPageSettings() { PageSize = 6 };
    SfGrid<ExpandoObject> GridInstance { get; set; }
    private string IndexKey;
    protected async Task BeginHandler(ActionEventArgs<ExpandoObject> args)
    {
        //if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
        //{
        //    if (args.Data is IDictionary<string, object> data)
        //    {
        //        args.Cancel = true;
        //        data["Index"] = Guid.NewGuid();
        //        await GridInstance.AddRecordAsync(args.Data);
        //    }
        //}
    }

    protected override async Task OnInitializedAsync()
    {
        var formDictionaryAttribute = Formmap.Properties[Formkey].DisplayRules.OfType<FormDictionaryAttribute>().FirstOrDefault();
        IndexKey = formDictionaryAttribute.Index;
        var currentIndex = 0;
        //foreach (dynamic item in Value)
        //{
        //    if (item is IDictionary<string, object> data)
        //    {
        //        if (!data.ContainsKey(IndexKey))
        //        {
        //            data.Add(IndexKey, Guid.NewGuid());
        //        }
        //        //else
        //        //{
        //        //    if ((Guid?)data[IndexKey] == Guid.Empty)
        //        //    {
        //        //        data[IndexKey] = Guid.NewGuid();
        //        //    }
        //        //}
        //    }
        //}
    }


}
